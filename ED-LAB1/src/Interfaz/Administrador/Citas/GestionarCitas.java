package Interfaz.Administrador.Citas;

import static Interfaz.Administrador.Administrador.mostrarAdmin;
import static Interfaz.Administrador.Citas.ConsultarMedicos.mostrarConsultarMedicos;
import static Logica.Citas.ArchivoCitas.a√±adirCita;
import static Logica.Citas.ArchivoCitas.cargarCitasDesdeArchivo;
import Logica.Citas.Cita;
import static Logica.Medicos.ArchivoMedicos.cargarMedicosDesdeArchivo;
import Logica.Medicos.Medico;
import static Logica.Pacientes.ArchivoPacientes.cargarPacientesDesdeArchivo;
import static Logica.Pacientes.ArchivoPacientes.obtenerCorreoPacientePorCedula;
import static Logica.Pacientes.ArchivoPacientes.obtenerNombreApellidoPacientePorCedula;
import static Logica.Pacientes.ArchivoPacientes.obtenerUsuarioPacientePorCedula;
import Logica.Pacientes.Paciente;
import java.awt.Cursor;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;

public class GestionarCitas extends javax.swing.JFrame {

    public GestionarCitas() throws IOException {
        initComponents();
        this.setLocationRelativeTo(null);
    }

    public static void mostrarGestionarCitas() throws IOException { //MUESTRA LA VENTANA LOGIN
        GestionarCitas gestionarCitas = new GestionarCitas();
        gestionarCitas.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        background = new javax.swing.JPanel();
        cedula_campo = new javax.swing.JTextField();
        nombre_completo_label = new javax.swing.JLabel();
        usuario_label = new javax.swing.JLabel();
        correo_label = new javax.swing.JLabel();
        consultar_boton = new javax.swing.JButton();
        back_boton = new javax.swing.JButton();
        especialidades_jcombobox = new javax.swing.JComboBox<>();
        fecha_jcombobox = new javax.swing.JComboBox<>();
        hora_jcombobox = new javax.swing.JComboBox<>();
        medico_campo = new javax.swing.JTextField();
        agregar_cita_boton = new javax.swing.JButton();
        consultar_medico_boton = new javax.swing.JButton();
        fondo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Gestionar Citas");
        setResizable(false);

        background.setBackground(new java.awt.Color(204, 204, 204));
        background.setLayout(null);

        cedula_campo.setForeground(new java.awt.Color(0, 0, 0));
        cedula_campo.setBorder(null);
        cedula_campo.setOpaque(false);
        background.add(cedula_campo);
        cedula_campo.setBounds(60, 250, 210, 30);

        nombre_completo_label.setForeground(new java.awt.Color(0, 0, 0));
        background.add(nombre_completo_label);
        nombre_completo_label.setBounds(60, 400, 210, 30);

        usuario_label.setForeground(new java.awt.Color(0, 0, 0));
        background.add(usuario_label);
        usuario_label.setBounds(60, 460, 210, 40);

        correo_label.setForeground(new java.awt.Color(0, 0, 0));
        background.add(correo_label);
        correo_label.setBounds(60, 536, 200, 30);

        consultar_boton.setBorder(null);
        consultar_boton.setBorderPainted(false);
        consultar_boton.setContentAreaFilled(false);
        consultar_boton.setDefaultCapable(false);
        consultar_boton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                consultar_botonActionPerformed(evt);
            }
        });
        background.add(consultar_boton);
        consultar_boton.setBounds(110, 310, 100, 30);

        back_boton.setBorderPainted(false);
        back_boton.setContentAreaFilled(false);
        back_boton.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                back_botonMouseMoved(evt);
            }
        });
        back_boton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                back_botonMouseExited(evt);
            }
        });
        back_boton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                back_botonActionPerformed(evt);
            }
        });
        background.add(back_boton);
        back_boton.setBounds(0, 560, 30, 40);

        especialidades_jcombobox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecciona una especialidad", "Optometria Ortoptica", "Glaucoma", "Cataratas", "Oftalmologia General", "Oftalmologia Pediatrica", "Retina y Vitreo" }));
        especialidades_jcombobox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                especialidades_jcomboboxActionPerformed(evt);
            }
        });
        background.add(especialidades_jcombobox);
        especialidades_jcombobox.setBounds(360, 260, 260, 30);

        fecha_jcombobox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione la fecha", "01 de Junio", "02 de Junio", "03 de Junio", "04 de Junio", "05 de Junio", "06 de Junio", "07 de Junio", "08 de Junio", "09 de Junio", "10 de Junio", "11 de Junio", "12 de Junio", "13 de Junio", "14 de Junio", "15 de Junio", "16 de Junio", "17 de Junio", "18 de Junio", "19 de Junio", "20 de Junio", "21 de Junio", "22 de Junio", "23 de Junio", "24 de Junio", "25 de Junio", "26 de Junio", "27 de Junio", "28 de Junio", "29 de Junio", "30 de Junio" }));
        fecha_jcombobox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fecha_jcomboboxActionPerformed(evt);
            }
        });
        background.add(fecha_jcombobox);
        fecha_jcombobox.setBounds(360, 410, 260, 30);

        hora_jcombobox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione la hora", "08:00 AM", "09:00 AM", "10:00 AM", "11:00 AM", "14:00 PM", "15:00 PM", "16:00 PM", "17:00 PM", "18:00 PM", "19:00 PM", "20:00 PM" }));
        hora_jcombobox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hora_jcomboboxActionPerformed(evt);
            }
        });
        background.add(hora_jcombobox);
        hora_jcombobox.setBounds(360, 480, 260, 30);

        medico_campo.setForeground(new java.awt.Color(0, 0, 0));
        medico_campo.setBorder(null);
        medico_campo.setOpaque(false);
        background.add(medico_campo);
        medico_campo.setBounds(370, 330, 190, 30);

        agregar_cita_boton.setBorderPainted(false);
        agregar_cita_boton.setContentAreaFilled(false);
        agregar_cita_boton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregar_cita_botonActionPerformed(evt);
            }
        });
        background.add(agregar_cita_boton);
        agregar_cita_boton.setBounds(590, 520, 100, 30);

        consultar_medico_boton.setBorderPainted(false);
        consultar_medico_boton.setContentAreaFilled(false);
        consultar_medico_boton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                consultar_medico_botonActionPerformed(evt);
            }
        });
        background.add(consultar_medico_boton);
        consultar_medico_boton.setBounds(620, 300, 60, 20);

        fondo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Interfaz/Imagenes/GestionarCitas/AgendarCita Feed.png"))); // NOI18N
        background.add(fondo);
        fondo.setBounds(0, 0, 960, 600);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(background, javax.swing.GroupLayout.DEFAULT_SIZE, 960, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(background, javax.swing.GroupLayout.DEFAULT_SIZE, 600, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void consultar_botonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_consultar_botonActionPerformed
        String cedula = cedula_campo.getText();
        try {
            nombre_completo_label.setText(obtenerNombreApellidoPacientePorCedula(cedula));
            usuario_label.setText(obtenerUsuarioPacientePorCedula(cedula));
            correo_label.setText(obtenerCorreoPacientePorCedula(cedula));
        } catch (IOException ex) {
            Logger.getLogger(GestionarCitas.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_consultar_botonActionPerformed

    private void back_botonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_back_botonActionPerformed
        dispose();
        mostrarAdmin();
    }//GEN-LAST:event_back_botonActionPerformed

    private void back_botonMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_back_botonMouseMoved
        this.setCursor(new Cursor(Cursor.HAND_CURSOR));
    }//GEN-LAST:event_back_botonMouseMoved

    private void back_botonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_back_botonMouseExited
        this.setCursor(DEFAULT_CURSOR);
    }//GEN-LAST:event_back_botonMouseExited

    private void especialidades_jcomboboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_especialidades_jcomboboxActionPerformed
        int especialidad = manejarSeleccionEspecialidad(especialidades_jcombobox);
    }//GEN-LAST:event_especialidades_jcomboboxActionPerformed

    private void consultar_medico_botonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_consultar_medico_botonActionPerformed
        try {
            String especialidades = (String) especialidades_jcombobox.getSelectedItem();
            mostrarConsultarMedicos(especialidades);
        } catch (IOException ex) {
            Logger.getLogger(GestionarCitas.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_consultar_medico_botonActionPerformed

    private void agregar_cita_botonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregar_cita_botonActionPerformed
        String cedulaPaciente = cedula_campo.getText().trim();
        String especialidad = (String) especialidades_jcombobox.getSelectedItem();
        String idMedico = medico_campo.getText().trim();
        String fecha = (String) fecha_jcombobox.getSelectedItem();
        String hora = (String) hora_jcombobox.getSelectedItem();

        try {
            String cedulaMedico;

            // Verifica si idMedico est√° vac√≠o o no es un n√∫mero
            if (idMedico.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Por favor, ingrese el ID del m√©dico.");
                return;
            }

            int posicion;
            try {
                posicion = Integer.parseInt(idMedico);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Por favor, ingrese un ID de m√©dico v√°lido.");
                return;
            }

            cedulaMedico = obtenerCedulaPorPosicion(posicion, "listamedicos.txt");

            if (cedulaMedico == null) {
                JOptionPane.showMessageDialog(null, "ID de m√©dico no encontrado.");
                return;
            }

            if (verificarCita(cedulaPaciente, especialidad, cedulaMedico, fecha, hora)) {
                A√±adirContadorCita(cedulaMedico);
                JOptionPane.showMessageDialog(null, "La cita ha sido agendada con exito");
                a√±adirCita(cedulaPaciente, especialidad, cedulaMedico, fecha, hora);
            }

        } catch (IOException ex) {
            Logger.getLogger(GestionarCitas.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Error al procesar la cita.");
        }

    }//GEN-LAST:event_agregar_cita_botonActionPerformed

    private void fecha_jcomboboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fecha_jcomboboxActionPerformed
        manejarSeleccionFecha(fecha_jcombobox);
    }//GEN-LAST:event_fecha_jcomboboxActionPerformed

    private void hora_jcomboboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hora_jcomboboxActionPerformed
        manejarSeleccionHora(hora_jcombobox);
    }//GEN-LAST:event_hora_jcomboboxActionPerformed
    public boolean verificarCita(String cedula, String especialidad, String cedulaMedico, String fecha, String hora) {
        try {
            // Cargar listas desde archivos
            List<Paciente> pacientes = cargarPacientesDesdeArchivo("listapacientes.txt");
            List<Medico> medicos = cargarMedicosDesdeArchivo("listamedicos.txt");

            // Verificaci√≥n 1: C√©dula del paciente existe
            boolean cedulaExiste = pacientes.stream().anyMatch(paciente -> paciente.getCedula().equals(cedula));
            if (!cedulaExiste) {
                JOptionPane.showMessageDialog(null, "C√©dula del paciente no encontrada.", "Error", JOptionPane.ERROR_MESSAGE);
                return false;
            }

            // Verificaci√≥n 2: C√©dula del m√©dico v√°lida
            Medico medicoSeleccionado = medicos.stream()
                    .filter(medico -> medico.getCedula().equals(cedulaMedico))
                    .findFirst()
                    .orElse(null);

            if (medicoSeleccionado == null) {
                JOptionPane.showMessageDialog(null, "C√©dula del m√©dico inv√°lida.", "Error", JOptionPane.ERROR_MESSAGE);
                return false;
            }

            // Verificaci√≥n adicional: el m√©dico no debe tener m√°s de 9 citas asignadas
            if (Integer.parseInt(medicoSeleccionado.getCitas_agendadas()) > 9) {
                JOptionPane.showMessageDialog(null, "El m√©dico seleccionado no tiene disponibilidad.", "Error", JOptionPane.ERROR_MESSAGE);
                return false;
            }

            // Verificaci√≥n 3: Fecha y hora disponibles
            List<Cita> citas = cargarCitasDesdeArchivo("listacitas.txt");
            boolean citaExistente = citas.stream().anyMatch(cita -> cita.getFecha().equals(fecha) && cita.getHora().equals(hora));
            if (citaExistente) {
                JOptionPane.showMessageDialog(null, "Ese horario no est√° disponible.", "Error", JOptionPane.ERROR_MESSAGE);
                return false;
            }

            // Si todas las verificaciones pasan
            return true;
        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error al cargar los archivos.", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton agregar_cita_boton;
    private javax.swing.JButton back_boton;
    private javax.swing.JPanel background;
    private javax.swing.JTextField cedula_campo;
    private javax.swing.JButton consultar_boton;
    private javax.swing.JButton consultar_medico_boton;
    private javax.swing.JLabel correo_label;
    private javax.swing.JComboBox<String> especialidades_jcombobox;
    private javax.swing.JComboBox<String> fecha_jcombobox;
    private javax.swing.JLabel fondo;
    private javax.swing.JComboBox<String> hora_jcombobox;
    private javax.swing.JTextField medico_campo;
    private javax.swing.JLabel nombre_completo_label;
    private javax.swing.JLabel usuario_label;
    // End of variables declaration//GEN-END:variables

    private int manejarSeleccionEspecialidad(JComboBox<String> comboBoxEspecialidad) {
        int indexSeleccionado = comboBoxEspecialidad.getSelectedIndex();
        int valorRetorno = 0; // Valor por defecto o valor para casos no manejados espec√≠ficamente

        if (indexSeleccionado == 0) {
            // Muestra un mensaje de error si el √≠ndice es 0
            JOptionPane.showMessageDialog(null, "Por favor, seleccione una especialidad", "Error", JOptionPane.ERROR_MESSAGE);
        } else if (indexSeleccionado >= 1 && indexSeleccionado <= 5) {
            valorRetorno = indexSeleccionado;
        }
        return valorRetorno;
    }

    private int manejarSeleccionFecha(JComboBox<String> comboBoxEspecialidad) {
        int indexSeleccionado = comboBoxEspecialidad.getSelectedIndex();
        int valorRetorno = 0; // Valor por defecto o valor para casos no manejados espec√≠ficamente

        if (indexSeleccionado == 0) {
            // Muestra un mensaje de error si el √≠ndice es 0
            JOptionPane.showMessageDialog(null, "Por favor, seleccione una fecha", "Error", JOptionPane.ERROR_MESSAGE);
        } else if (indexSeleccionado >= 1 && indexSeleccionado <= 30) {
            valorRetorno = indexSeleccionado;
        }
        return valorRetorno;
    }

    private int manejarSeleccionHora(JComboBox<String> comboBoxEspecialidad) {
        int indexSeleccionado = comboBoxEspecialidad.getSelectedIndex();
        int valorRetorno = 0; // Valor por defecto o valor para casos no manejados espec√≠ficamente

        if (indexSeleccionado == 0) {
            // Muestra un mensaje de error si el √≠ndice es 0
            JOptionPane.showMessageDialog(null, "Por favor, seleccione una hora", "Error", JOptionPane.ERROR_MESSAGE);
        } else if (indexSeleccionado >= 1 && indexSeleccionado <= 11) {
            valorRetorno = indexSeleccionado;
        }
        return valorRetorno;
    }

    public String obtenerCedulaPorPosicion(int idMedico, String listamedicos) throws IOException {
        List<Medico> medicos = cargarMedicosDesdeArchivo(listamedicos);
        if (idMedico >= 0 && idMedico < medicos.size()) {
            Medico medico = medicos.get(idMedico - 1);
            return medico.getCedula();
        } else {
            return null; // Retorna null si la posici√≥n est√° fuera de rango
        }
    }

    public static void A√±adirContadorCita(String cedulaMedico) {
        try {
            File archivoMedicos = new File("listamedicos.txt");
            File archivoTemporal = new File("MedicosTemporal.txt");

            BufferedReader br = new BufferedReader(new FileReader(archivoMedicos));
            BufferedWriter bw = new BufferedWriter(new FileWriter(archivoTemporal));
            String cedulaMedic = cedulaMedico.split(";")[1]; // Extrae la segunda posicion de la linea del medico que se escogio, es decir, su nombre
            String linea;

            while ((linea = br.readLine()) != null) {
                if (linea.contains(cedulaMedic)) {

                    String[] partes = linea.split(";");

                    int numeroCitas = Integer.parseInt(partes[5]) + 1;

                    partes[5] = String.valueOf(numeroCitas);
                    linea = String.join(";", partes);
                }

                bw.write(linea);
                bw.newLine();
            }

            br.close();
            bw.close();

            archivoMedicos.delete();
            archivoTemporal.renameTo(archivoMedicos);

        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Ocurri√≥ un error al intentar actualizar el archivo de m√©dicos.", "Error de actualizaci√≥n", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }

    }
}
